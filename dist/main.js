(()=>{var l={426:(l,n,e)=>{"use strict";e.d(n,{Z:()=>a});var u=e(537),t=e.n(u),r=e(645),o=e.n(r)()(t());o.push([l.id,".allBoards {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    gap: 48px;\n}\n\n.rows {\n    display: flex;\n}\n\n.cell {\n    height: 24px;\n    width: 24px;\n    border-style: solid;\n}\n\n.empty {\n    background-color: aqua;\n}\n\n.ship {\n    background-color: grey;\n}\n\n.hit {\n    background-color: red;\n}\n\n.goodGuess {\n    background-color: green;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:[".allBoards {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n    gap: 48px;\n}\n\n.rows {\n    display: flex;\n}\n\n.cell {\n    height: 24px;\n    width: 24px;\n    border-style: solid;\n}\n\n.empty {\n    background-color: aqua;\n}\n\n.ship {\n    background-color: grey;\n}\n\n.hit {\n    background-color: red;\n}\n\n.goodGuess {\n    background-color: green;\n}"],sourceRoot:""}]);const a=o},645:l=>{"use strict";l.exports=function(l){var n=[];return n.toString=function(){return this.map((function(n){var e="",u=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),u&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=l(n),u&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(l,e,u,t,r){"string"==typeof l&&(l=[[null,l,void 0]]);var o={};if(u)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var i=0;i<l.length;i++){var c=[].concat(l[i]);u&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),t&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=t):c[4]="".concat(t)),n.push(c))}},n}},537:l=>{"use strict";l.exports=function(l){var n=l[1],e=l[3];if(!e)return n;if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),t="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),r="/*# ".concat(t," */"),o=e.sources.map((function(l){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(l," */")}));return[n].concat(o).concat([r]).join("\n")}return[n].join("\n")}},379:l=>{"use strict";var n=[];function e(l){for(var e=-1,u=0;u<n.length;u++)if(n[u].identifier===l){e=u;break}return e}function u(l,u){for(var r={},o=[],a=0;a<l.length;a++){var s=l[a],i=u.base?s[0]+u.base:s[0],c=r[i]||0,d="".concat(i," ").concat(c);r[i]=c+1;var p=e(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var f=t(h,u);u.byIndex=a,n.splice(a,0,{identifier:d,updater:f,references:1})}o.push(d)}return o}function t(l,n){var e=n.domAPI(n);return e.update(l),function(n){if(n){if(n.css===l.css&&n.media===l.media&&n.sourceMap===l.sourceMap&&n.supports===l.supports&&n.layer===l.layer)return;e.update(l=n)}else e.remove()}}l.exports=function(l,t){var r=u(l=l||[],t=t||{});return function(l){l=l||[];for(var o=0;o<r.length;o++){var a=e(r[o]);n[a].references--}for(var s=u(l,t),i=0;i<r.length;i++){var c=e(r[i]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}r=s}}},569:l=>{"use strict";var n={};l.exports=function(l,e){var u=function(l){if(void 0===n[l]){var e=document.querySelector(l);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(l){e=null}n[l]=e}return n[l]}(l);if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(e)}},216:l=>{"use strict";l.exports=function(l){var n=document.createElement("style");return l.setAttributes(n,l.attributes),l.insert(n,l.options),n}},565:(l,n,e)=>{"use strict";l.exports=function(l){var n=e.nc;n&&l.setAttribute("nonce",n)}},795:l=>{"use strict";l.exports=function(l){var n=l.insertStyleElement(l);return{update:function(e){!function(l,n,e){var u="";e.supports&&(u+="@supports (".concat(e.supports,") {")),e.media&&(u+="@media ".concat(e.media," {"));var t=void 0!==e.layer;t&&(u+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),u+=e.css,t&&(u+="}"),e.media&&(u+="}"),e.supports&&(u+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(u+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(u,l,n.options)}(n,l,e)},remove:function(){!function(l){if(null===l.parentNode)return!1;l.parentNode.removeChild(l)}(n)}}}},589:l=>{"use strict";l.exports=function(l,n){if(n.styleSheet)n.styleSheet.cssText=l;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(l))}}},347:l=>{const n=(l,e)=>{const u=[e.enemyGuesses,l.enemyGuesses,l.myBoard,e.myBoard];document.querySelector(".allBoards")&&document.querySelector(".allBoards").remove();const t=document.createElement("div");t.classList.add("allBoards");for(const r in u){const o=document.createElement("div");o.classList.add("boardContainer");for(const t in u[r]){const a=document.createElement("div");a.classList.add("rows");for(const o in u[r][t]){const s=document.createElement("div");s.classList.add("cell"),u[r]===e.enemyGuesses&&s.addEventListener("click",(()=>{console.log(t,o),e.receiveAttack(t,o),n(l,e)})),u[r]===l.enemyGuesses&&s.addEventListener("click",(()=>{console.log(t,o)})),null===u[r][t][o]?s.classList.add("empty"):!1===u[r][t][o]?s.classList.add("hit"):!0===u[r][t][o]?s.classList.add("goodGuess"):s.classList.add("ship"),a.appendChild(s)}o.appendChild(a)}t.appendChild(o)}document.querySelector("#content").appendChild(t)};l.exports=n},498:l=>{l.exports=()=>({myBoard:[[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null]],enemyGuesses:[[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null,null,null]],myShips:{},placeShip(l,n,e,u){this.myShips[`${u.name}`]=u;let t=0;if("horizontal"===e){if(n+u.length>=0&&n+u.length<11)for(;n+t<n+u.length;)this.myBoard[l][n+t]=`${t}${u.name}`,t+=1}else if("vertical"===e&&l+u.length>0&&l+u.length<11)for(;l+t<l+u.length;)this.myBoard[l+t][n]=`${t}${u.name}`,t+=1},receiveAttack(l,n){let e;if(null!==this.myBoard[l][n]&&!1!==this.myBoard[l][n]){const u=this.myBoard[l][n],t=u[0],r=u.slice(1);this.myShips[`${r}`].hit(t),this.enemyGuesses[l][n]=!0,this.myBoard[l][n]=!1,e=[r,t]}else this.enemyGuesses[l][n]=!1,e=!1;return e},allSunk(){let l=!0;const n=this.myBoard.flat();for(const e in n)[null,!1].includes(n[e])||(l=!1);return l}})},507:l=>{l.exports=(l,n)=>({name:l,playerBoard:n})},643:l=>{l.exports=(l,n)=>({length:l,name:n,damage:new Array(l).fill(!1),sunk:!1,hit(l){!1===this.sunk&&(this.damage[l]=!0,this.isSunk())},isSunk(){this.damage.includes(!1)||(this.sunk=!0)}})}},n={};function e(u){var t=n[u];if(void 0!==t)return t.exports;var r=n[u]={id:u,exports:{}};return l[u](r,r.exports,e),r.exports}e.n=l=>{var n=l&&l.__esModule?()=>l.default:()=>l;return e.d(n,{a:n}),n},e.d=(l,n)=>{for(var u in n)e.o(n,u)&&!e.o(l,u)&&Object.defineProperty(l,u,{enumerable:!0,get:n[u]})},e.o=(l,n)=>Object.prototype.hasOwnProperty.call(l,n),e.nc=void 0,(()=>{"use strict";var l=e(379),n=e.n(l),u=e(795),t=e.n(u),r=e(569),o=e.n(r),a=e(565),s=e.n(a),i=e(216),c=e.n(i),d=e(589),p=e.n(d),h=e(426),f={};f.styleTagTransform=p(),f.setAttributes=s(),f.insert=o().bind(null,"head"),f.domAPI=t(),f.insertStyleElement=c(),n()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var m=e(643),y=e.n(m),A=e(498),v=e.n(A),g=e(507),B=e.n(g),b=e(347),C=e.n(b);!function(){const l=B()("p1",v()()),n=B()("p2",v()());l.playerBoard.placeShip(0,0,"horizontal",y()(5,"carrier")),l.playerBoard.placeShip(2,2,"horizontal",y()(4,"battleship")),l.playerBoard.placeShip(4,4,"horizontal",y()(3,"cruiser")),l.playerBoard.placeShip(6,6,"horizontal",y()(3,"submarine")),l.playerBoard.placeShip(8,8,"horizontal",y()(2,"destroyer")),n.playerBoard.placeShip(1,5,"horizontal",y()(5,"carrier")),n.playerBoard.placeShip(3,3,"horizontal",y()(4,"battleship")),n.playerBoard.placeShip(5,1,"horizontal",y()(3,"cruiser")),n.playerBoard.placeShip(7,6,"horizontal",y()(3,"submarine")),n.playerBoard.placeShip(9,4,"horizontal",y()(2,"destroyer")),C()(l.playerBoard,n.playerBoard)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,